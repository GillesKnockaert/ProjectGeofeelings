#!/usr/bin/env node

/*
* bin/www is de main startup file / startup script
* die de server zal starten met de basisconfiguratie
* daarna wordt server.js opgestart*/

/**
 * Module dependencies.
 */

//importeer module uit server.js
var app = require('../server'); //d.i. onze express applicatie uit server.js

var debug = require('debug')('geofeelings:server');
var http = require('http');  //de http module toevoegen

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); //zoekt naar port in environment, als er geen is --> 3000 gebruiken
app.set('port', port);

/**
 * Create HTTP server.
 */
    //hiermee veranderen we onze nodejs code in een server
    //parameter = de callback (de code die we willen uitvoeren als een gebruiker met de server verbindt)
var server = http.createServer(app);  //met de http variabele maken we een server

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);  //server luistert op poort 3000
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);  //zet een string om in een integer

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


